<!DOCTYPE html>
<html>
<head>
    <title>Knockout and EntitySpaces - Textboxes</title>

    <script src="../Lib_{{VER}}/JQuery/jquery-1.7.1.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/json/json2.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/KendoUI/kendo.web.min.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/Knockout/knockout-2.0.0.debug.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/knockoutkendo/knockout-kendo.min.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/ES/entityspaces.XHR.debug.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/Generated/GRIPSSWorkload.js" type="text/javascript"></script>
    <script src="../Lib_{{VER}}/Config/baseurl.js" type="text/javascript"></script>
    <link href="../css/kendo.common.min.css" rel="stylesheet" />
    <link href="../css/kendo-lightblue-noedit.css" rel="stylesheet" />
    <link href="../css/kendo-lightblue-menu.css" rel="Stylesheet" type="text/css" />

</head>
<body>
    <button onclick="test1();">Test 1</button><br /><br />
    <button onclick="test2();">Test 2</button><br /><br />
    <button onclick="test3();">Test 3</button><br /><br />
    <button onclick="test4();">Test 4</button><br /><br />
</body>
</html>

<script language="javascript" type="text/javascript">

    // es.dataProvider.baseURL = "http://localhost/esService/esJson.svc/";
    // es.dataProvider.baseURL = "http://www.entityspaces.net/Knockout/Part1/esService/esJson.svc/";
    // es.dataProvider.baseURL = "http://localhost:51679/KWCFSvr/esJson.svc/";
    // es.dataProvider.baseURL = "http://goccvse03.goccomputers.com/KWCFSvr/esJson.svc/";
    es.dataProvider.baseURL = SITEBASEURL + "Service/DataServer.svc/";

    test1 = function () {

        // Load an employee with hierarchical model and save hierarchical data back to the server
        var wl = new es.objects.GRIPSSWorkload();

        if (wl.loadByPrimaryKey(1616693)) {
            wl.Client("Daniel P. was here");  
            wl.save();
        }

        //        if (emp.LoadByPrimaryKeyHierarchical(2)) {  // <== this method is in the Custom "Employee.js" file
        //            emp.FirstName("Thiss");
        //            emp.OrdersCollectionByEmployeeID()[0].ShipCity(Math.random().toString().substr(0, 4));
        //            emp.save();
        //        }

        //        // Collection load/save
        //        var coll = new es.objects.EmployeesCollection();
        //        coll.loadAll();

        //        coll()[0].FirstName("Rocks!!");
        //        coll.save();
    }

    test2 = function () {

        //==========================================================================
        // The XMLHttpRequestProvider allows you to make any call you desire
        //==========================================================================
        var request = es.dataProvider.makeRequest(es.dataProvider.baseURL, "Employees_LoadHierarchical", null);

        es.dataProvider.makeRequest(es.dataProvider.baseURL, "Employees_LoadHierarchical", null,
        function (data) {
            // Success ...
        },
        function (status, error) {
            // Fail ...
            var f = 0;
        });

        //----------------------------------------------------------
        // Here is a code snippet using the synchronous approach
        //----------------------------------------------------------
        var emp = new es.objects.Employees();
        if (emp.loadByPrimaryKey(2)) {

            emp.FirstName("sync" + "!!!");
            emp.save();
        }

        var coll = new es.objects.EmployeesCollection();
        coll.loadAll();

        coll()[0].FirstName("Rocks!!");
        coll.save();

        //-----------------------------------------------------------------
        // Here is the same code from above using the asynchronous approach
        //-----------------------------------------------------------------
        var emp = new es.objects.Employees();
        emp.loadByPrimaryKey(2, function (data, state) {

            if (state.wasLoaded) {

                emp.FirstName("sync" + "!!!");

                emp.save(function (data) {

                    var coll = new es.objects.EmployeesCollection();

                    coll.loadAll(function (data) {

                        coll()[0].FirstName("Rocks!!");

                        coll.save(function (data) {

                            var str = "Save is complete ...";
                        });
                    });
                });
            }
        }, null, "MyStateData");
    }

    test3 = function () {

        // Add a single record
        var emp = new es.objects.Employees();
        emp.FirstName("Just");
        emp.LastName("Added");
        emp.save();

        // It's an autoincrement column and we get it back
        var employeeId = emp.EmployeeID();

        // Add two new employees through a collection
        var coll = new es.objects.EmployeesCollection();

        emp = new es.objects.Employees();
        emp.FirstName("Just1");
        emp.LastName("Added1");
        coll.push(emp);

        emp = new es.objects.Employees();
        emp.FirstName("Just2");
        emp.LastName("Added2");
        coll.push(emp);

        coll.save();

        // Check to make sure we got our autoincrement primary keys
        var employeeId_1 = coll()[0].EmployeeID();
        var employeeId_2 = coll()[1].EmployeeID();
    }

    test4 = function () {

        // Add a single record
        var emp = new es.objects.Employees();
        emp.FirstName("Just");
        emp.LastName("Added");
        emp.save();

        var employeeId = emp.EmployeeID();

        // Reload the new record and delete it
        emp = new es.objects.Employees();
        if (emp.loadByPrimaryKey(employeeId)) {
            emp.markAsDeleted();
            emp.save();
        }

        // Can we reload the deleted record
        emp = new es.objects.Employees();
        var loaded = emp.loadByPrimaryKey(employeeId);

        // The employeeId = undefined
        employeeId = emp.EmployeeID();
    }

</script>